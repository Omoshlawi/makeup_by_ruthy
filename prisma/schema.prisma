generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  profileUpdated Boolean  @default(false)
  isActive       Boolean  @default(true)
  isAdmin        Boolean  @default(false)
  password       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  profile        Profile?
}

model Profile {
  id          String      @id @default(uuid())
  name        String?
  userId      String      @unique
  bio         String?
  avatarUrl   String?
  phoneNumber String      @unique
  email       String      @unique
  gender      Gender      @default(Unknown)
  socialLinks Json? // Example: {"linkedin": "url", "twitter": "url", ...}
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  student     Student?
  instructor  Instructor?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Topic {
  id                     String                  @id @default(uuid())
  name                   String                  @unique
  overview               String?                 @db.Text
  thumbnail              String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  courseTags             CourseTopic[]
  studentAreasOfInterest StudentAreaOfInterest[]
  instructorSpecialities InstructorSpeciality[]
}

model Student {
  id              String                  @id @default(uuid())
  profileId       String                  @unique
  skillLevel      Level
  profile         Profile                 @relation(fields: [profileId], onDelete: Cascade, references: [id])
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  enrollments     Enrollment[]
  areasOfInterest StudentAreaOfInterest[]
}

model StudentAreaOfInterest {
  id        String   @id @default(uuid())
  studentId String
  topicId   String
  student   Student  @relation(fields: [studentId], onDelete: Cascade, references: [id])
  topic     Topic    @relation(fields: [topicId], onDelete: Cascade, references: [id])
  createdAt DateTime @default(now())

  @@unique([studentId, topicId])
}

model Instructor {
  id           String                 @id @default(uuid())
  profileId    String                 @unique
  profile      Profile                @relation(fields: [profileId], onDelete: Cascade, references: [id])
  courses      Course[]
  experience   Int //Years of expirience
  // availability Json // Example: {"monday": ["9AM-11AM", "1PM-3PM"], ...}
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  specialities InstructorSpeciality[]
}

model InstructorSpeciality {
  id           String     @id @default(uuid())
  instructorId String
  topicId      String
  instructor   Instructor @relation(fields: [instructorId], onDelete: Cascade, references: [id])
  topic        Topic      @relation(fields: [topicId], onDelete: Cascade, references: [id])
  createdAt    DateTime   @default(now())

  @@unique([instructorId, topicId])
}

model Course {
  id             String        @id @default(uuid())
  title          String
  overview       String?       @db.Text
  tags           String?       @db.Text // Comma seperated tags
  status         CourseStatus  @default(Draft)
  thumbnail      String
  previewVideo   Json //{"url":String, source: "network"|"file"|"network"}
  instructorId   String
  language       String
  timeToComplete Decimal //In minutes
  price          Decimal
  approved       Boolean       @default(false)
  level          Level
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  instructor     Instructor    @relation(fields: [instructorId], onDelete: Cascade, references: [id])
  enrollments    Enrollment[]
  modules        Module[]
  topics         CourseTopic[]
  tests          Test[]
  averageRating  Float         @default(0.0) //caches avg rating after every addition of review
}

model CourseTopic {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  topicId   String
  topic     Topic    @relation(fields: [topicId], onDelete: Cascade, references: [id])
  createdAt DateTime @default(now())

  @@unique([courseId, topicId])
}

model Module {
  id             String           @id @default(uuid())
  courseId       String
  order          Int
  title          String
  overview       String?          @db.Text
  course         Course           @relation(fields: [courseId], onDelete: Cascade, references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  content        Content[]
  moduleProgress ModuleProgress[]
  tests          Test[]

  @@unique([courseId, title])
}

model Content {
  id              String                  @id @default(uuid())
  moduleId        String
  order           Int
  title           String
  type            ContentType
  resource        String                  @db.Text
  module          Module                  @relation(fields: [moduleId], onDelete: Cascade, references: [id])
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  contentProgress ModuleContentProgress[]

  @@unique([moduleId, title])
}

model CourseReview {
  id           String     @id @default(uuid())
  enrollmentId String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  rating       Float
  comment      String?    @db.Text
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Enrollment {
  id                 String           @id @default(uuid())
  courseId           String
  cost               Decimal //Price of course as per enrollment time, resets when payment aint complete
  course             Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studentId          String
  student            Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  completionDate     DateTime?
  createdAt          DateTime         @default(now())
  payment            Payment?
  moduleProgress     ModuleProgress[]
  progressPercentage Decimal          @default(0.0)
  attempts           TestAttempt[]
  reviews            CourseReview[]
}

model ModuleProgress {
  id           Int                     @id @default(autoincrement())
  enrollmentId String
  enrollement  Enrollment              @relation(fields: [enrollmentId], onDelete: Cascade, references: [id])
  moduleId     String
  module       Module                  @relation(fields: [moduleId], onDelete: Cascade, references: [id])
  createdAt    DateTime                @default(now())
  contents     ModuleContentProgress[]

  @@unique([enrollmentId, moduleId])
}

model ModuleContentProgress {
  id               Int            @id @default(autoincrement())
  moduleProgressId Int
  moduleProgress   ModuleProgress @relation(fields: [moduleProgressId], onDelete: Cascade, references: [id])
  contentId        String
  content          Content        @relation(fields: [contentId], onDelete: Cascade, references: [id])
  createdAt        DateTime       @default(now())

  @@unique([contentId, moduleProgressId])
}

model Payment {
  id                 String     @id @unique @default(uuid())
  amount             Decimal?
  enrollmentId       String     @unique
  enrollment         Enrollment @relation(fields: [enrollmentId], onDelete: Cascade, references: [id])
  complete           Boolean    @default(false)
  description        String?    @db.Text
  merchantRequestId  String     @unique
  checkoutRequestId  String
  resultCode         String?
  resultDescription  String?
  mpesareceiptNumber String?
  transactionDate    String?
  phoneNumber        String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model Test {
  id        String         @id @unique @default(uuid())
  title     String
  order     Int            @default(0)
  courseId  String?
  course    Course?        @relation(fields: [courseId], onDelete: Cascade, references: [id])
  moduleId  String?
  module    Module?        @relation(fields: [moduleId], onDelete: Cascade, references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  questions TestQuestion[]
  attempts  TestAttempt[]

  @@unique([title, courseId])
  @@unique([title, moduleId])
}

model TestQuestion {
  id     String @id @unique @default(uuid())
  testId String
  order  Int    @default(0)
  test      Test                  @relation(fields: [testId], onDelete: Cascade, references: [id])
  question  String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  choices   TestQuestionChoice[]
  attempt   TestAttemptQuestion[]

  @@unique([testId, question])
}

model TestQuestionChoice {
  id         String                @id @unique @default(uuid())
  questionId String
  question   TestQuestion          @relation(fields: [questionId], onDelete: Cascade, references: [id])
  choice     String
  answer     Boolean               @default(false)
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  attempt    TestAttemptQuestion[]

  @@unique([questionId, choice])
}

model TestAttempt {
  id               String                @id @unique @default(uuid())
  enrollmentId     String
  enrollement      Enrollment            @relation(fields: [enrollmentId], onDelete: Cascade, references: [id])
  testId           String
  test             Test                  @relation(fields: [testId], onDelete: Cascade, references: [id])
  score            Decimal               @default(0.0)
  createdAt        DateTime              @default(now())
  attemptQuestions TestAttemptQuestion[]
}

model TestAttemptQuestion {
  id         String             @id @unique @default(uuid())
  attemptId  String
  attempt    TestAttempt        @relation(fields: [attemptId], onDelete: Cascade, references: [id])
  questionId String
  question   TestQuestion       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  choiceId   String
  choice     TestQuestionChoice @relation(fields: [choiceId], onDelete: Cascade, references: [id])

  @@unique([attemptId, questionId, choiceId])
}

enum Gender {
  Male
  Female
  Unknown
}

enum Level {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
}

enum ContentType {
  Video
  Document
  Text
  Image
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  profileUpdated Boolean  @default(false)
  isActive       Boolean  @default(true)
  isAdmin        Boolean  @default(false)
  password       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  profile        Profile?
}

model Profile {
  id          String      @id @default(uuid())
  name        String?
  userId      String      @unique
  bio         String?
  avatarUrl   String?
  phoneNumber String      @unique
  email       String      @unique
  gender      Gender      @default(Unknown)
  socialLinks Json? // Example: {"linkedin": "url", "twitter": "url", ...}
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  student     Student?
  instructor  Instructor?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Topic {
  id                     String                  @id @default(uuid())
  name                   String                  @unique
  overview               String?                 @db.Text
  thumbnail              String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  courseTags             CourseTopic[]
  studentAreasOfInterest StudentAreaOfInterest[]
  instructorSpecialities InstructorSpeciality[]
}

model Student {
  id              String                  @id @default(uuid())
  profileId       String                  @unique
  skillLevel      Level
  profile         Profile                 @relation(fields: [profileId], onDelete: Cascade, references: [id])
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  enrollments     Enrollment[]
  reviews         Review[]
  areasOfInterest StudentAreaOfInterest[]
}

model StudentAreaOfInterest {
  id        String   @id @default(uuid())
  studentId String
  topicId   String
  student   Student  @relation(fields: [studentId], onDelete: Cascade, references: [id])
  topic     Topic    @relation(fields: [topicId], onDelete: Cascade, references: [id])
  createdAt DateTime @default(now())

  @@unique([studentId, topicId])
}

model Instructor {
  id           String                 @id @default(uuid())
  profileId    String                 @unique
  profile      Profile                @relation(fields: [profileId], onDelete: Cascade, references: [id])
  courses      Course[]
  experience   Int //Years of expirience
  // availability Json // Example: {"monday": ["9AM-11AM", "1PM-3PM"], ...}
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  specialities InstructorSpeciality[]
}

model InstructorSpeciality {
  id           String     @id @default(uuid())
  instructorId String
  topicId      String
  instructor   Instructor @relation(fields: [instructorId], onDelete: Cascade, references: [id])
  topic        Topic      @relation(fields: [topicId], onDelete: Cascade, references: [id])
  createdAt    DateTime   @default(now())

  @@unique([instructorId, topicId])
}

model Course {
  id             String        @id @default(uuid())
  title          String
  overview       String?       @db.Text
  tags           String?       @db.Text // Comma seperated tags
  status         CourseStatus  @default(Draft)
  thumbnail      String
  previewVideo   Json //{"url":String, source: "network"|"file"|"network"}
  instructorId   String
  language       String
  timeToComplete Decimal //In minutes
  price          Decimal
  approved       Boolean       @default(false)
  level          Level
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  instructor     Instructor    @relation(fields: [instructorId], onDelete: Cascade, references: [id])
  enrollments    Enrollment[]
  modules        Module[]
  topics         CourseTopic[]
  reviews        Review[]
}

model CourseTopic {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  topicId   String
  topic     Topic    @relation(fields: [topicId], onDelete: Cascade, references: [id])
  createdAt DateTime @default(now())

  @@unique([courseId, topicId])
}

model Module {
  id        String    @id @default(uuid())
  courseId  String
  title     String
  overview  String?   @db.Text
  course    Course    @relation(fields: [courseId], onDelete: Cascade, references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   Content[]
}

model Content {
  id        String      @id @default(uuid())
  moduleId  String
  type      ContentType
  resource  String      @db.Text
  metadata  Json // Example: {"duration": "5min", "author": "Instructor Name"}
  module    Module      @relation(fields: [moduleId], onDelete: Cascade, references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  rating    Float // You can use an integer or float depending on the granularity of the rating system
  text      String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
}

enum Gender {
  Male
  Female
  Unknown
}

enum Level {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
}

enum ContentType {
  Video
  Document
  Text
  Image
}

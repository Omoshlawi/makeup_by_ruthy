generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  profileUpdated Boolean  @default(false)
  isActive       Boolean  @default(true)
  password       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  profile        Profile?
}

model Profile {
  id   String  @id @default(uuid())
  name String?
  userId      String  @unique
  bio         String?
  avatarUrl   String?
  phoneNumber String  @unique
  email       String  @unique
  gender      Gender      @default(Unknown)
  socialLinks Json? // Example: {"linkedin": "url", "twitter": "url", ...}
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  student     Student?
  instructor  Instructor?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Student {
  id          String       @id @default(uuid())
  profileId   String       @unique
  profile     Profile      @relation(fields: [profileId], onDelete: Cascade, references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
  Review      Review[]
}

model Instructor {
  id        String   @id @default(uuid())
  profileId String   @unique
  profile   Profile  @relation(fields: [profileId], onDelete: Cascade, references: [id])
  courses   Course[]
  // availability Json // Example: {"monday": ["9AM-11AM", "1PM-3PM"], ...}
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseCategory {
  id        String   @id @default(uuid())
  name      String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id         String      @id @default(uuid())
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  courseTags CourseTag[]
}

model Course {
  id             String         @id @default(uuid())
  title          String
  description    String?        @db.Text
  categoryId     String
  coverImage     String
  instructorId   String
  language       String
  timeToComplete String
  level          Level
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  category       CourseCategory @relation(fields: [categoryId], onDelete: Cascade, references: [id])
  instructor     Instructor     @relation(fields: [instructorId], onDelete: Cascade, references: [id])
  enrollments    Enrollment[]
  modules        Module[]
  tags           CourseTag[]
  reviews        Review[]
}

model CourseTag {
  courseId String
  course   Course   @relation(fields: [courseId], references: [id])
  tagId    String
  tag      Tag      @relation(fields: [tagId], references: [id])
  taggedAt DateTime @default(now())

  @@id([courseId, tagId])
}

model Module {
  id          String    @id @default(uuid())
  courseId    String
  title       String
  description String?   @db.Text
  course      Course    @relation(fields: [courseId], onDelete: Cascade, references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  content     Content[]
}

// TODO Handle Questions and answers
model Content {
  id        String      @id @default(uuid())
  moduleId  String
  type      ContentType
  resource  String      @db.Text
  metadata  Json // Example: {"duration": "5min", "author": "Instructor Name"}
  module    Module      @relation(fields: [moduleId], onDelete: Cascade, references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  rating    Float // You can use an integer or float depending on the granularity of the rating system
  text      String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
}

enum Gender {
  Male
  Female
  Unknown
}

enum Level {
  Beginner
  Intermediate
  Advanced
}

enum ContentType {
  Video
  Document
  Text
  Image
}
